buildscript {
    ext.kotlin_version = '1.1.3'
    ext.project_version = '0.10'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath("org.jetbrains.dokka:dokka-gradle-plugin:0.9+")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
    }
}

plugins {
  id 'com.github.johnrengelman.shadow' version '1.2.4'
}

apply from: "buildscripts/publishing.gradle"
apply from: "buildscripts/codegen.gradle"

def subproj(project) {
    project.with {
        apply plugin: 'kotlin'
        sourceSets {
            main.kotlin.srcDirs = ['src']
            test.kotlin.srcDirs = ['test']
        }
        repositories {
            mavenCentral()
        }
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        }
        configurePublishing()
    }
}

project(':core') {
    subproj(project)
    
    sourceSets.main.kotlin.srcDirs = ['src', 'srcjvm', 'external/js', 'srcgen']

    compileKotlin.dependsOn(":codegen")

    dependencies {
        compile "org.slf4j:slf4j-api:1.7.21"
        compile "org.knowm.xchart:xchart:3.1.0"
    }
}

project(':logging') {
    subproj(project)

    dependencies {
        compile project(":core")
        compile "org.slf4j:slf4j-api:1.7.21"
        compile "ch.qos.logback:logback-classic:1.1.7"
    }
}

project(':backend-matrix-mtj') {
    subproj(project)

    dependencies {
        compile project(":core")
        compile("com.googlecode.matrix-toolkits-java:mtj:1.0.4") {
            // Fix issue with pom-only artifacts in MTJ
            exclude module: "com.github.fommil.netlib:all:pom:1.1.2"
        }
    }
}

project(':backend-matrix-ejml') {
    subproj(project)

    dependencies {
        compile project(":core")
        compile "org.ejml:all:0.27"
    }
}

project(':backend-matrix-jblas') {
    subproj(project)

    dependencies {
        compile project(":core")
        compile "org.jblas:jblas:1.2.3"
    }
}

project(':tests') {
    subproj(project)
    
    dependencies {
        testCompile project(":core")
        testCompile project(":backend-matrix-ejml")
        testCompile project(":backend-matrix-jblas")
        testCompile project(":backend-matrix-mtj")
        testCompile "junit:junit:4.12"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }
    test {
        // Some natives are broken on some systems, and our goal isn't to test netlib's backends
        jvmArgs '-Dcom.github.fommil.netlib.BLAS=com.github.fommil.netlib.F2jBLAS',
                '-Dcom.github.fommil.netlib.LAPACK=com.github.fommil.netlib.F2jLAPACK',
                '-Dcom.github.fommil.netlib.ARPACK=com.github.fommil.netlib.F2jARPACK'
    }
}

apply plugin: "org.jetbrains.dokka"

dokka {
    dependsOn(":codegen")
    outputFormat = "gfm"
    outputDirectory = "docs/markdown"
    moduleName = 'api'
    sourceDirs = files(["core/src", "core/srcgen"])
    includes = ['core/Module.md']
    jdkVersion = 8
    doLast {
        // Dokka uses moduleName for the final folder name, and mangles upper case letters
        file("docs/markdown/api").renameTo(file("docs/markdown/Reference_API_Docs"))
    }
}


// Enable making a fatjar with the root proj
apply plugin: "java"
repositories {
	jcenter()
}
dependencies {
	compile project(":core")
	compile project(":logging")
	compile project(":backend-matrix-ejml")
	compile project(":backend-matrix-jblas")
	compile project(":backend-matrix-mtj")
}
