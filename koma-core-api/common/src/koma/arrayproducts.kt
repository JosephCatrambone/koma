/**
 * THIS FILE IS AUTOGENERATED, DO NOT MODIFY. EDIT THE FILES IN templates/
 * AND RUN ./gradlew :codegen INSTEAD!
 */

/**
 * This file defines inner/outer products between NDArrays.
 */

package koma

import koma.internal.default.utils.sumDoubles
import koma.internal.default.utils.sumFloats
import koma.internal.default.utils.sumLongs
import koma.ndarray.NDArray
import koma.internal.KomaJvmName

private fun dotLong(array1: NDArray<*>, array2: NDArray<*>): Long {
    if (array1.size != array2.size)
        throw IllegalArgumentException("Cannot compute a dot product between arrays of different size")
    return sumLongs(array1.size) { array1.getLong(it)*array2.getLong(it) }
}

private fun dotFloat(array1: NDArray<*>, array2: NDArray<*>): Float {
    if (array1.size != array2.size)
        throw IllegalArgumentException("Cannot compute a dot product between arrays of different size")
    return sumFloats(array1.size) { array1.getFloat(it)*array2.getFloat(it) }.toFloat()
}

private fun dotDouble(array1: NDArray<*>, array2: NDArray<*>): Double {
    if (array1.size != array2.size)
        throw IllegalArgumentException("Cannot compute a dot product between arrays of different size")
    return sumDoubles(array1.size) { array1.getDouble(it)*array2.getDouble(it) }
}

private fun innerLong(array1: NDArray<*>, array2: NDArray<*>, axis1: Int, axis2: Int): NDArray<Long> {
    val shape1 = array1.shape()
    val shape2 = array2.shape()
    if (axis1 < 0 || axis1 >= shape1.size)
        throw IllegalArgumentException("Illegal axis ($axis1) for a NDArray with ${shape1.size} dimensions")
    if (axis2 < 0 || axis2 >= shape2.size)
        throw IllegalArgumentException("Illegal aixs ($axis2) for a NDArray with ${shape2.size} dimensions")
    val length = shape1[axis1]
    if (length != shape2[axis2])
        throw IllegalArgumentException("Cannot compute inner product between axes of different length ($length and ${shape2[axis2]}")
    val newShape = ArrayList<Int>()
    for (i in 0 until shape1.size)
        if (i != axis1)
            newShape.add(shape1[i])
    for (i in 0 until shape2.size)
        if (i != axis2)
            newShape.add(shape2[i])
    if (newShape.size == 0)
        throw IllegalArgumentException("The NDArray produced by inner() must have at least one dimension.  Use dot() for a scalar inner product.")
    val index1 = IntArray(shape1.size)
    val index2 = IntArray(shape2.size)
    return NDArray(*newShape.toIntArray()) { newIndex: IntArray ->
        var j = 0
        for (i in 0 until newIndex.size) {
            if (j == axis1)
                j++
            if (j == axis2+shape1.size)
                j++
            if (j < shape1.size)
                index1[j] = newIndex[i]
            else
                index2[j-shape1.size] = newIndex[i]
            j++
        }
        sumLongs(length) {
            index1[axis1] = it
            index2[axis2] = it
            array1.getLong(array1.nIdxToLinear(index1)) * array2.getLong(array2.nIdxToLinear(index2))
        }
    }
}

private fun innerFloat(array1: NDArray<*>, array2: NDArray<*>, axis1: Int, axis2: Int): NDArray<Float> {
    val shape1 = array1.shape()
    val shape2 = array2.shape()
    if (axis1 < 0 || axis1 >= shape1.size)
        throw IllegalArgumentException("Illegal axis ($axis1) for a NDArray with ${shape1.size} dimensions")
    if (axis2 < 0 || axis2 >= shape2.size)
        throw IllegalArgumentException("Illegal axis ($axis2) for a NDArray with ${shape2.size} dimensions")
    val length = shape1[axis1]
    if (length != shape2[axis2])
        throw IllegalArgumentException("Cannot compute inner product between axes of different length ($length and ${shape2[axis2]}")
    val newShape = ArrayList<Int>()
    for (i in 0 until shape1.size)
        if (i != axis1)
            newShape.add(shape1[i])
    for (i in 0 until shape2.size)
        if (i != axis2)
            newShape.add(shape2[i])
    if (newShape.size == 0)
        throw IllegalArgumentException("The NDArray produced by inner() must have at least one dimension.  Use dot() for a scalar inner product.")
    val index1 = IntArray(shape1.size)
    val index2 = IntArray(shape2.size)
    return NDArray(*newShape.toIntArray()) { newIndex: IntArray ->
        var j = 0
        for (i in 0 until newIndex.size) {
            if (j == axis1)
                j++
            if (j == axis2+shape1.size)
                j++
            if (j < shape1.size)
                index1[j] = newIndex[i]
            else
                index2[j-shape1.size] = newIndex[i]
            j++
        }
        sumFloats(length) {
            index1[axis1] = it
            index2[axis2] = it
            array1.getFloat(array1.nIdxToLinear(index1)) * array2.getFloat(array2.nIdxToLinear(index2))
        }.toFloat()
    }
}

private fun innerDouble(array1: NDArray<*>, array2: NDArray<*>, axis1: Int, axis2: Int): NDArray<Double> {
    val shape1 = array1.shape()
    val shape2 = array2.shape()
    if (axis1 < 0 || axis1 >= shape1.size)
        throw IllegalArgumentException("Illegal axis ($axis1) for a NDArray with ${shape1.size} dimensions")
    if (axis2 < 0 || axis2 >= shape2.size)
        throw IllegalArgumentException("Illegal axis ($axis2) for a NDArray with ${shape2.size} dimensions")
    val length = shape1[axis1]
    if (length != shape2[axis2])
        throw IllegalArgumentException("Cannot compute inner product between axes of different length ($length and ${shape2[axis2]}")
    val newShape = ArrayList<Int>()
    for (i in 0 until shape1.size)
        if (i != axis1)
            newShape.add(shape1[i])
    for (i in 0 until shape2.size)
        if (i != axis2)
            newShape.add(shape2[i])
    if (newShape.size == 0)
        throw IllegalArgumentException("The NDArray produced by inner() must have at least one dimension.  Use dot() for a scalar inner product.")
    val index1 = IntArray(shape1.size)
    val index2 = IntArray(shape2.size)
    return NDArray(*newShape.toIntArray()) { newIndex: IntArray ->
        var j = 0
        for (i in 0 until newIndex.size) {
            if (j == axis1)
                j++
            if (j == axis2+shape1.size)
                j++
            if (j < shape1.size)
                index1[j] = newIndex[i]
            else
                index2[j-shape1.size] = newIndex[i]
            j++
        }
        sumDoubles(length) {
            index1[axis1] = it
            index2[axis2] = it
            array1.getDouble(array1.nIdxToLinear(index1)) * array2.getDouble(array2.nIdxToLinear(index2))
        }
    }
}

private fun outerLong(array1: NDArray<*>, array2: NDArray<*>): NDArray<Long> {
    val shape1 = array1.shape()
    val shape2 = array2.shape()
    val newShape = (shape1+shape2).toIntArray()
    return NDArray(*newShape) { index: IntArray ->
        val index1 = index.sliceArray(0 until shape1.size)
        val index2 = index.sliceArray(shape1.size until index.size)
        array1.getLong(array1.nIdxToLinear(index1)) * array2.getLong(array2.nIdxToLinear(index2))
    }
}

private fun outerFloat(array1: NDArray<*>, array2: NDArray<*>): NDArray<Float> {
    val shape1 = array1.shape()
    val shape2 = array2.shape()
    val newShape = (shape1+shape2).toIntArray()
    return NDArray(*newShape) { index: IntArray ->
        val index1 = index.sliceArray(0 until shape1.size)
        val index2 = index.sliceArray(shape1.size until index.size)
        array1.getFloat(array1.nIdxToLinear(index1)) * array2.getFloat(array2.nIdxToLinear(index2))
    }
}

private fun outerDouble(array1: NDArray<*>, array2: NDArray<*>): NDArray<Double> {
    val shape1 = array1.shape()
    val shape2 = array2.shape()
    val newShape = (shape1+shape2).toIntArray()
    return NDArray(*newShape) { index: IntArray ->
        val index1 = index.sliceArray(0 until shape1.size)
        val index2 = index.sliceArray(shape1.size until index.size)
        array1.getDouble(array1.nIdxToLinear(index1)) * array2.getDouble(array2.nIdxToLinear(index2))
    }
}

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotByteByte")
infix fun NDArray<Byte>.dot(array2: NDArray<Byte>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerByteByte")
infix fun NDArray<Byte>.inner(array2: NDArray<Byte>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerByteByte")
fun NDArray<Byte>.inner(array2: NDArray<Byte>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerByteByte")
infix fun NDArray<Byte>.outer(array2: NDArray<Byte>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotByteShort")
infix fun NDArray<Byte>.dot(array2: NDArray<Short>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerByteShort")
infix fun NDArray<Byte>.inner(array2: NDArray<Short>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerByteShort")
fun NDArray<Byte>.inner(array2: NDArray<Short>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerByteShort")
infix fun NDArray<Byte>.outer(array2: NDArray<Short>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotByteInt")
infix fun NDArray<Byte>.dot(array2: NDArray<Int>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerByteInt")
infix fun NDArray<Byte>.inner(array2: NDArray<Int>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerByteInt")
fun NDArray<Byte>.inner(array2: NDArray<Int>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerByteInt")
infix fun NDArray<Byte>.outer(array2: NDArray<Int>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotByteLong")
infix fun NDArray<Byte>.dot(array2: NDArray<Long>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerByteLong")
infix fun NDArray<Byte>.inner(array2: NDArray<Long>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerByteLong")
fun NDArray<Byte>.inner(array2: NDArray<Long>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerByteLong")
infix fun NDArray<Byte>.outer(array2: NDArray<Long>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotByteFloat")
infix fun NDArray<Byte>.dot(array2: NDArray<Float>): Float = dotFloat(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerByteFloat")
infix fun NDArray<Byte>.inner(array2: NDArray<Float>): NDArray<Float> = innerFloat(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerByteFloat")
fun NDArray<Byte>.inner(array2: NDArray<Float>, axis1: Int, axis2: Int): NDArray<Float> = innerFloat(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerByteFloat")
infix fun NDArray<Byte>.outer(array2: NDArray<Float>): NDArray<Float> = outerFloat(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotByteDouble")
infix fun NDArray<Byte>.dot(array2: NDArray<Double>): Double = dotDouble(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerByteDouble")
infix fun NDArray<Byte>.inner(array2: NDArray<Double>): NDArray<Double> = innerDouble(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerByteDouble")
fun NDArray<Byte>.inner(array2: NDArray<Double>, axis1: Int, axis2: Int): NDArray<Double> = innerDouble(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerByteDouble")
infix fun NDArray<Byte>.outer(array2: NDArray<Double>): NDArray<Double> = outerDouble(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotShortByte")
infix fun NDArray<Short>.dot(array2: NDArray<Byte>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerShortByte")
infix fun NDArray<Short>.inner(array2: NDArray<Byte>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerShortByte")
fun NDArray<Short>.inner(array2: NDArray<Byte>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerShortByte")
infix fun NDArray<Short>.outer(array2: NDArray<Byte>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotShortShort")
infix fun NDArray<Short>.dot(array2: NDArray<Short>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerShortShort")
infix fun NDArray<Short>.inner(array2: NDArray<Short>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerShortShort")
fun NDArray<Short>.inner(array2: NDArray<Short>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerShortShort")
infix fun NDArray<Short>.outer(array2: NDArray<Short>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotShortInt")
infix fun NDArray<Short>.dot(array2: NDArray<Int>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerShortInt")
infix fun NDArray<Short>.inner(array2: NDArray<Int>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerShortInt")
fun NDArray<Short>.inner(array2: NDArray<Int>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerShortInt")
infix fun NDArray<Short>.outer(array2: NDArray<Int>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotShortLong")
infix fun NDArray<Short>.dot(array2: NDArray<Long>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerShortLong")
infix fun NDArray<Short>.inner(array2: NDArray<Long>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerShortLong")
fun NDArray<Short>.inner(array2: NDArray<Long>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerShortLong")
infix fun NDArray<Short>.outer(array2: NDArray<Long>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotShortFloat")
infix fun NDArray<Short>.dot(array2: NDArray<Float>): Float = dotFloat(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerShortFloat")
infix fun NDArray<Short>.inner(array2: NDArray<Float>): NDArray<Float> = innerFloat(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerShortFloat")
fun NDArray<Short>.inner(array2: NDArray<Float>, axis1: Int, axis2: Int): NDArray<Float> = innerFloat(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerShortFloat")
infix fun NDArray<Short>.outer(array2: NDArray<Float>): NDArray<Float> = outerFloat(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotShortDouble")
infix fun NDArray<Short>.dot(array2: NDArray<Double>): Double = dotDouble(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerShortDouble")
infix fun NDArray<Short>.inner(array2: NDArray<Double>): NDArray<Double> = innerDouble(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerShortDouble")
fun NDArray<Short>.inner(array2: NDArray<Double>, axis1: Int, axis2: Int): NDArray<Double> = innerDouble(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerShortDouble")
infix fun NDArray<Short>.outer(array2: NDArray<Double>): NDArray<Double> = outerDouble(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotIntByte")
infix fun NDArray<Int>.dot(array2: NDArray<Byte>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerIntByte")
infix fun NDArray<Int>.inner(array2: NDArray<Byte>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerIntByte")
fun NDArray<Int>.inner(array2: NDArray<Byte>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerIntByte")
infix fun NDArray<Int>.outer(array2: NDArray<Byte>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotIntShort")
infix fun NDArray<Int>.dot(array2: NDArray<Short>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerIntShort")
infix fun NDArray<Int>.inner(array2: NDArray<Short>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerIntShort")
fun NDArray<Int>.inner(array2: NDArray<Short>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerIntShort")
infix fun NDArray<Int>.outer(array2: NDArray<Short>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotIntInt")
infix fun NDArray<Int>.dot(array2: NDArray<Int>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerIntInt")
infix fun NDArray<Int>.inner(array2: NDArray<Int>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerIntInt")
fun NDArray<Int>.inner(array2: NDArray<Int>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerIntInt")
infix fun NDArray<Int>.outer(array2: NDArray<Int>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotIntLong")
infix fun NDArray<Int>.dot(array2: NDArray<Long>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerIntLong")
infix fun NDArray<Int>.inner(array2: NDArray<Long>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerIntLong")
fun NDArray<Int>.inner(array2: NDArray<Long>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerIntLong")
infix fun NDArray<Int>.outer(array2: NDArray<Long>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotIntFloat")
infix fun NDArray<Int>.dot(array2: NDArray<Float>): Float = dotFloat(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerIntFloat")
infix fun NDArray<Int>.inner(array2: NDArray<Float>): NDArray<Float> = innerFloat(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerIntFloat")
fun NDArray<Int>.inner(array2: NDArray<Float>, axis1: Int, axis2: Int): NDArray<Float> = innerFloat(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerIntFloat")
infix fun NDArray<Int>.outer(array2: NDArray<Float>): NDArray<Float> = outerFloat(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotIntDouble")
infix fun NDArray<Int>.dot(array2: NDArray<Double>): Double = dotDouble(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerIntDouble")
infix fun NDArray<Int>.inner(array2: NDArray<Double>): NDArray<Double> = innerDouble(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerIntDouble")
fun NDArray<Int>.inner(array2: NDArray<Double>, axis1: Int, axis2: Int): NDArray<Double> = innerDouble(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerIntDouble")
infix fun NDArray<Int>.outer(array2: NDArray<Double>): NDArray<Double> = outerDouble(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotLongByte")
infix fun NDArray<Long>.dot(array2: NDArray<Byte>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerLongByte")
infix fun NDArray<Long>.inner(array2: NDArray<Byte>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerLongByte")
fun NDArray<Long>.inner(array2: NDArray<Byte>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerLongByte")
infix fun NDArray<Long>.outer(array2: NDArray<Byte>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotLongShort")
infix fun NDArray<Long>.dot(array2: NDArray<Short>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerLongShort")
infix fun NDArray<Long>.inner(array2: NDArray<Short>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerLongShort")
fun NDArray<Long>.inner(array2: NDArray<Short>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerLongShort")
infix fun NDArray<Long>.outer(array2: NDArray<Short>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotLongInt")
infix fun NDArray<Long>.dot(array2: NDArray<Int>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerLongInt")
infix fun NDArray<Long>.inner(array2: NDArray<Int>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerLongInt")
fun NDArray<Long>.inner(array2: NDArray<Int>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerLongInt")
infix fun NDArray<Long>.outer(array2: NDArray<Int>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotLongLong")
infix fun NDArray<Long>.dot(array2: NDArray<Long>): Long = dotLong(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerLongLong")
infix fun NDArray<Long>.inner(array2: NDArray<Long>): NDArray<Long> = innerLong(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerLongLong")
fun NDArray<Long>.inner(array2: NDArray<Long>, axis1: Int, axis2: Int): NDArray<Long> = innerLong(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerLongLong")
infix fun NDArray<Long>.outer(array2: NDArray<Long>): NDArray<Long> = outerLong(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotLongFloat")
infix fun NDArray<Long>.dot(array2: NDArray<Float>): Double = dotDouble(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerLongFloat")
infix fun NDArray<Long>.inner(array2: NDArray<Float>): NDArray<Double> = innerDouble(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerLongFloat")
fun NDArray<Long>.inner(array2: NDArray<Float>, axis1: Int, axis2: Int): NDArray<Double> = innerDouble(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerLongFloat")
infix fun NDArray<Long>.outer(array2: NDArray<Float>): NDArray<Double> = outerDouble(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotLongDouble")
infix fun NDArray<Long>.dot(array2: NDArray<Double>): Double = dotDouble(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerLongDouble")
infix fun NDArray<Long>.inner(array2: NDArray<Double>): NDArray<Double> = innerDouble(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerLongDouble")
fun NDArray<Long>.inner(array2: NDArray<Double>, axis1: Int, axis2: Int): NDArray<Double> = innerDouble(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerLongDouble")
infix fun NDArray<Long>.outer(array2: NDArray<Double>): NDArray<Double> = outerDouble(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotFloatByte")
infix fun NDArray<Float>.dot(array2: NDArray<Byte>): Float = dotFloat(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerFloatByte")
infix fun NDArray<Float>.inner(array2: NDArray<Byte>): NDArray<Float> = innerFloat(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerFloatByte")
fun NDArray<Float>.inner(array2: NDArray<Byte>, axis1: Int, axis2: Int): NDArray<Float> = innerFloat(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerFloatByte")
infix fun NDArray<Float>.outer(array2: NDArray<Byte>): NDArray<Float> = outerFloat(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotFloatShort")
infix fun NDArray<Float>.dot(array2: NDArray<Short>): Float = dotFloat(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerFloatShort")
infix fun NDArray<Float>.inner(array2: NDArray<Short>): NDArray<Float> = innerFloat(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerFloatShort")
fun NDArray<Float>.inner(array2: NDArray<Short>, axis1: Int, axis2: Int): NDArray<Float> = innerFloat(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerFloatShort")
infix fun NDArray<Float>.outer(array2: NDArray<Short>): NDArray<Float> = outerFloat(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotFloatInt")
infix fun NDArray<Float>.dot(array2: NDArray<Int>): Float = dotFloat(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerFloatInt")
infix fun NDArray<Float>.inner(array2: NDArray<Int>): NDArray<Float> = innerFloat(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerFloatInt")
fun NDArray<Float>.inner(array2: NDArray<Int>, axis1: Int, axis2: Int): NDArray<Float> = innerFloat(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerFloatInt")
infix fun NDArray<Float>.outer(array2: NDArray<Int>): NDArray<Float> = outerFloat(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotFloatLong")
infix fun NDArray<Float>.dot(array2: NDArray<Long>): Double = dotDouble(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerFloatLong")
infix fun NDArray<Float>.inner(array2: NDArray<Long>): NDArray<Double> = innerDouble(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerFloatLong")
fun NDArray<Float>.inner(array2: NDArray<Long>, axis1: Int, axis2: Int): NDArray<Double> = innerDouble(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerFloatLong")
infix fun NDArray<Float>.outer(array2: NDArray<Long>): NDArray<Double> = outerDouble(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotFloatFloat")
infix fun NDArray<Float>.dot(array2: NDArray<Float>): Float = dotFloat(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerFloatFloat")
infix fun NDArray<Float>.inner(array2: NDArray<Float>): NDArray<Float> = innerFloat(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerFloatFloat")
fun NDArray<Float>.inner(array2: NDArray<Float>, axis1: Int, axis2: Int): NDArray<Float> = innerFloat(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerFloatFloat")
infix fun NDArray<Float>.outer(array2: NDArray<Float>): NDArray<Float> = outerFloat(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotFloatDouble")
infix fun NDArray<Float>.dot(array2: NDArray<Double>): Double = dotDouble(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerFloatDouble")
infix fun NDArray<Float>.inner(array2: NDArray<Double>): NDArray<Double> = innerDouble(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerFloatDouble")
fun NDArray<Float>.inner(array2: NDArray<Double>, axis1: Int, axis2: Int): NDArray<Double> = innerDouble(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerFloatDouble")
infix fun NDArray<Float>.outer(array2: NDArray<Double>): NDArray<Double> = outerDouble(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotDoubleByte")
infix fun NDArray<Double>.dot(array2: NDArray<Byte>): Double = dotDouble(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerDoubleByte")
infix fun NDArray<Double>.inner(array2: NDArray<Byte>): NDArray<Double> = innerDouble(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerDoubleByte")
fun NDArray<Double>.inner(array2: NDArray<Byte>, axis1: Int, axis2: Int): NDArray<Double> = innerDouble(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerDoubleByte")
infix fun NDArray<Double>.outer(array2: NDArray<Byte>): NDArray<Double> = outerDouble(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotDoubleShort")
infix fun NDArray<Double>.dot(array2: NDArray<Short>): Double = dotDouble(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerDoubleShort")
infix fun NDArray<Double>.inner(array2: NDArray<Short>): NDArray<Double> = innerDouble(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerDoubleShort")
fun NDArray<Double>.inner(array2: NDArray<Short>, axis1: Int, axis2: Int): NDArray<Double> = innerDouble(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerDoubleShort")
infix fun NDArray<Double>.outer(array2: NDArray<Short>): NDArray<Double> = outerDouble(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotDoubleInt")
infix fun NDArray<Double>.dot(array2: NDArray<Int>): Double = dotDouble(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerDoubleInt")
infix fun NDArray<Double>.inner(array2: NDArray<Int>): NDArray<Double> = innerDouble(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerDoubleInt")
fun NDArray<Double>.inner(array2: NDArray<Int>, axis1: Int, axis2: Int): NDArray<Double> = innerDouble(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerDoubleInt")
infix fun NDArray<Double>.outer(array2: NDArray<Int>): NDArray<Double> = outerDouble(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotDoubleLong")
infix fun NDArray<Double>.dot(array2: NDArray<Long>): Double = dotDouble(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerDoubleLong")
infix fun NDArray<Double>.inner(array2: NDArray<Long>): NDArray<Double> = innerDouble(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerDoubleLong")
fun NDArray<Double>.inner(array2: NDArray<Long>, axis1: Int, axis2: Int): NDArray<Double> = innerDouble(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerDoubleLong")
infix fun NDArray<Double>.outer(array2: NDArray<Long>): NDArray<Double> = outerDouble(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotDoubleFloat")
infix fun NDArray<Double>.dot(array2: NDArray<Float>): Double = dotDouble(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerDoubleFloat")
infix fun NDArray<Double>.inner(array2: NDArray<Float>): NDArray<Double> = innerDouble(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerDoubleFloat")
fun NDArray<Double>.inner(array2: NDArray<Float>, axis1: Int, axis2: Int): NDArray<Double> = innerDouble(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerDoubleFloat")
infix fun NDArray<Double>.outer(array2: NDArray<Float>): NDArray<Double> = outerDouble(this, array2)

/**
 * Compute the dot product between two arrays.
 */
@KomaJvmName("dotDoubleDouble")
infix fun NDArray<Double>.dot(array2: NDArray<Double>): Double = dotDouble(this, array2)
/**
 * Compute the inner product of two arrays, summing over the last axis of the first array and the first axis of the second array.
 */
@KomaJvmName("innerDoubleDouble")
infix fun NDArray<Double>.inner(array2: NDArray<Double>): NDArray<Double> = innerDouble(this, array2, this.shape().size-1, 0)
/**
 * Compute the inner product of two arrays, summing over [axis1] of the first array and [axis2] of the second array.
 */
@KomaJvmName("innerDoubleDouble")
fun NDArray<Double>.inner(array2: NDArray<Double>, axis1: Int, axis2: Int): NDArray<Double> = innerDouble(this, array2, axis1, axis2)
/**
 * Compute the outer product of two arrays.
 */
@KomaJvmName("outerDoubleDouble")
infix fun NDArray<Double>.outer(array2: NDArray<Double>): NDArray<Double> = outerDouble(this, array2)